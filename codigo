#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT11.h>

// ====== CONFIG Wi-Fi ======
const char* ssid = "FIAP-IOT";     
const char* password = "F!@p25.IOT";

// ====== CONFIG MQTT ======
const char* mqtt_server = "54.221.163.3";     
const int mqtt_port = 1883;

// ====== PINOS ======
const int ldrPin = 34;    
const int dhtPin = 4;     
const int ledPin = 2;     

// ====== OBJETOS ======
WiFiClient espClient;
PubSubClient client(espClient);
DHT11 dht(dhtPin);   

// ====== PROTÃ“TIPOS DAS FUNÃ‡Ã•ES ======
void conectarWiFi();
void reconnect();
void callback(char* topic, byte* payload, unsigned int length);

// ====== SETUP ======
void setup() {
  Serial.begin(9600);       
  pinMode(ldrPin, INPUT);
  pinMode(ledPin, OUTPUT);
  conectarWiFi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

// ====== LOOP ======
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // --- LÃª sensores ---
  int ldrValue = analogRead(ldrPin);
  int temp = dht.readTemperature();
  int umid = dht.readHumidity();

  // --- Publica no MQTT ---
  char msg[50];
  sprintf(msg, "Temperatura: %d C", temp);
  client.publish("esp32/temp", msg);

  sprintf(msg, "Umidade: %d", umid);
  client.publish("esp32/umid", msg);

  sprintf(msg, "Luminosidade: %d", ldrValue);
  client.publish("esp32/ldr", msg);

  // --- Exibe no Serial separado ---
  Serial.print("Temperatura: "); Serial.print(temp); Serial.println(" C");
  Serial.print("Umidade: "); Serial.print(umid); Serial.println(" %");
  Serial.print("Luminosidade: "); Serial.println(ldrValue);
  Serial.println("-------------------------");

  delay(5000);
}

// ====== CALLBACK (LED) ======
void callback(char* topic, byte* payload, unsigned int length) {
  String mensagem;
  for (int i = 0; i < length; i++) {
    mensagem += (char)payload[i];
  }
  mensagem.trim();

  Serial.print("Comando recebido em ");
  Serial.print(topic);
  Serial.print(": ");
  Serial.println(mensagem);

  // ðŸ”¹ Confirma o tÃ³pico exato
  if (String(topic) == "esp32/led") {
    if (mensagem.equalsIgnoreCase("piscar")) {
      Serial.println("Acionando LED...");
      for (int i = 0; i < 3; i++) {
        digitalWrite(ledPin, HIGH);
        delay(300);
        digitalWrite(ledPin, LOW);
        delay(300);
      }
      Serial.println("LED piscou!");
    }
  }
}

// ====== FUNÃ‡Ã•ES AUXILIARES ======
void conectarWiFi() {
  Serial.print("Conectando ao WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" conectado!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Conectando ao MQTT...");
    if (client.connect("ESP32_Sensores")) {
      Serial.println(" conectado!");
      client.subscribe("esp32/led");
    } else {
      Serial.print(" falhou, rc=");
      Serial.println(client.state());
      delay(2000);
    }
  }
}
